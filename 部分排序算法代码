
public class Example{
	public static void sort(Comparable[] a){
		
	}
	
	private static boolean less(Comparable v, Comparable w){
		return v.compareTo(w)<0;
	}
	
	private static void exch(Comparable[] a, int i, int j){
		Comparable t = a[i];
		a[i] = a[j];
		a[j] = t;
	}
	
	private static void show(Comparable[] a){
		//在单行中打印数组
		for(int i = 0; i< a.length; i++)
			StdOut.print(a[i]+" ");
		StdOut.println();
	}
	
	public static boolean isSorted(Comparable[] a){
		//测试数组元素是否有序
		for(int i = 1; i< a.length; i++)
			if(less(a[i], a[i-1])) return false;
		return true;
	}
	
	public static void main(String[] args){
		//从标准输入读取字符串，将它们排序并输出
		String[] a=In.readStrings[];
		sort(a);
		assert isSorted(a);
		show(a);
	}
}


//选择排序
public class Selection{
	public static void sort(Comparable[] a){
		//将a[]按升序排列
		int N = a.length;
		for(int i = 0; i<N; i++){
			//将a[i]和a[i+1..N]中最小的元素交换
			int min = i;
			for(int j=i+1; j< N; j++)
				if(less(a[j],a[min])) min = j;
			exch(a,i,min);
		}
	}
	//less(), exch(), isSorted()和main()方法见“排序算法类模版”
}



//插入排序
public class Insertion{
	public static void sort(Comparable[] a){
		//将a[]按升序排列
		int N = a.length;
		for(int i = 1; i<N; i++){
			//将a[i]插入到a[i-1],a[i-2],a[i-3]...之中
			for(int j = i; j>0&& less(a[j],a[j-1]); j--)
				exch(a,j,j-1);
		}
		//less(), exch(), isSorted()和main()方法见“排序算法类模版”
	}
}

//希尔排序
public class Shell{
	public static void sort(Comparable[] a){
		//将a[]按升序排列
		int N=a.length;
		int h=1;
		while(h<N/3) h=3*h+1;//1,4,13,40,121,364,1093,...
		while(h>=1){
			//将数组变为h有序
			for(int i = h; i<N; i++){
				//将a[i]插入到a[i-h],a[i-2*h],a[i-3*h]...之中
				 for(int j = i; j>= h&& less(a[j],a[j-h]); j -=h)
					 exch(a,j,j-h);
			}
			h = h/3;
		}
		//less(), exch(), isSorted()和main()方法见“排序算法类模版”
	}
}

//原地归并的抽象方法
public static void merge(Comparable[] a, int lo, int mid, int hi){
	//将a[lo..mid]a[mid+1..hi]归并
	int i = lo, j = mid+1;
	for(int k = lo; k<=hi; k++)  //将a[lo..hi]复制到aux[lo..hi]
		aux[k]=a[k];
	for(int k = lo; k<=hi; k++)  //归并回到a[lo..hi]
		if      (i>mid)               a[k]=aux[j++];
		else if (j>hi)                a[k]=aux[j++];
		else if (less(aux[j],aux[i])) a[k]=aux[j++];
		else                          a[k]=aux[j++];
}

//自顶向下的归并排序
public class Merge{
	private static Comparable[] aux; //归并所需的辅助数组
	
	public static void sort(Comparable[] a){
		aux = new Comparable[a.length]; //一次性分配空间
		sort(a, 0, a.length-1);
	}
	
	private static void sort(Comparable[] a, int lo, int hi){
		//将数组a[lo..hi]排序
		if(hi<=lo) return;
		int mid = lo+(hi-lo)/2;
		sort(a,lo,mid);.//将左半边排序
		sort(a,mid+1,hi);//将右半边排序
		merge(a, lo, mid, hi);//归并结果
	}
}

//自底向上的归并排序
public class MergeBU{
	private static Comparable[] aux; //归并所需的辅助数组
	
	//merge()代码在“原地归并的抽象方法”
	public static void merge(Comparable[] a, int lo, int mid, int hi){
		//将a[lo..mid]a[mid+1..hi]归并
		int i = lo, j = mid+1;
		for(int k = lo; k<=hi; k++)  //将a[lo..hi]复制到aux[lo..hi]
			aux[k]=a[k];
		for(int k = lo; k<=hi; k++)  //归并回到a[lo..hi]
			if      (i>mid)               a[k]=aux[j++];
			else if (j>hi)                a[k]=aux[j++];
			else if (less(aux[j],aux[i])) a[k]=aux[j++];
			else                          a[k]=aux[j++];
	}
	
	public static void sort(Comparable[] a){
		//进行lgN次两两归并
		int N=a.length;
		aux = new Comparable[N];
		for(int sz = 1; sz<N; sz = sz+sz)//sz子数据大小
			for(int lo = 0; lo< N-sz; lo += sz+sz)// lo子数组索引
				merge(a,lo, lo+sz-1; Math.min(lo+sz+sz-1, N-1));
	}
}
